/* eslint-env mocha */
/* global expect, testContext */
/* eslint-disable prefer-arrow-callback, no-unused-expressions */

import fs from 'fs'
import path from 'path'

import loadCommand from '../loadCommand'

describe(testContext(__filename), function () {
  before(function () {
    this.cmdConfigFilePath = cmdName => path.resolve(__dirname, '..', '..', '..', 'config', 'commands', `${cmdName}.yaml`)
    this.testCommandsToWrite = {
      testcmd1: `%YAML 1.2
---
command:
  name: testcmd1
  description: generated by tests (2)
  usage: testcmd1 [options] <command>
  _inactive: true
`,

      testcmd2: `%YAML 1.2
---
command:
  name: testcmd2
  description: generated by tests (1)
  usage: testcmd2 [options] <command>
  commands:
    -
      name: present
      description: this subcommand should be present
      usage: present [options]
    -
      name: ignored
      description: this subcommand should be ignored
      usage: launch [options]
      _inactive: true
`,
    }

    Object.keys(this.testCommandsToWrite).forEach(cmdName => {
      fs.writeFileSync(this.cmdConfigFilePath(cmdName), this.testCommandsToWrite[cmdName])
    })
  })

  after(function () {
    Object.keys(this.testCommandsToWrite).forEach(cmdName => {
      fs.unlinkSync(this.cmdConfigFilePath(cmdName))
    })
  })

  describe('imports and exports', function () {
    it('usage(), parse(), and commandDescriptor exist for a loaded command', function () {
      const commands = ['testcmd2'].map(cmdName => loadCommand(cmdName))
      Object.keys(commands).forEach(cmdName => {
        const command = commands[cmdName]
        expect(command.commandDescriptor).to.have.property('name')
        expect(typeof command.usage).to.equal('function')
        expect(typeof command.parse).to.equal('function')
      })
    })
  })

  describe('ignore inactive', function () {
    it('ignores commands with _inactive attribute set to true', function () {
      expect(() => loadCommand('testcmd1')).to.throw
    })

    it('ignores subcommands with _inactive attribute set to true', function () {
      const testcmd2 = loadCommand('testcmd2')
      const foundIgnored = testcmd2.commandDescriptor.commands.reduce((found, command) => {
        return found || command.name === 'ignored'
      }, false)
      const foundPresent = testcmd2.commandDescriptor.commands.reduce((found, command) => {
        return found || command.name === 'present'
      }, false)
      expect(foundIgnored).to.not.be.ok
      expect(foundPresent).to.be.ok
    })
  })
})
